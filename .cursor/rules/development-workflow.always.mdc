
# Development Workflow - Always Apply

## 🔄 **MANDATORY: Incremental Development**

### **One Change at a Time**
```cpp
// ✅ CORRECT: Make one focused change, test, then continue
void MyFunction() {
    // Add one feature
    // Test it works
    // Add next feature
    // Test again
}

// ❌ WRONG: Multiple changes without testing
void MyFunction() {
    // Add feature 1
    // Add feature 2  
    // Add feature 3
    // Hope it all works together
}
```

### **Development Cycle**
1. **Plan** the next small step
2. **Implement** the change
3. **Compile** to catch syntax errors
4. **Test** using CI system when possible
5. **Verify** the result works
6. **Document** in development log
7. **Perform sanity check** (see project-sanity-check.always.mdc rule)
8. **Repeat** for next step

## 📝 **MANDATORY: Development Log Updates**

### **After Every Task**
- **Append timestamped entry** to `docs/DEVELOPMENT_LOG.md`
- **Document what was implemented**
- **Record any issues encountered**
- **Note next steps**
- **Include file paths and line numbers** for significant changes

### **Log Entry Format**
```markdown
### 2025-08-17 HH:MM — TASK DESCRIPTION

**STATUS**: ✅ COMPLETED / 🔄 IN PROGRESS / ❌ FAILED

**SUMMARY**: Brief description of what was accomplished

**FILES MODIFIED**:
- `path/to/file.cpp` - Description of changes
- `path/to/file.h` - Description of changes

**NEXT STEPS**: What should be done next
```

## 🏗️ **Repository Structure Rules**

*Note: Repository structure is defined in `ue561-plugin-builder.mdc` to avoid duplication.*

**NEVER** keep duplicate plugin code at repo root.

## 🔧 **Module Boundary Rules**

*Note: Detailed module boundary rules and WITH_EDITOR guards are defined in `ue561-plugin-builder.mdc` to avoid duplication.*

## 📚 **Documentation Requirements**

### **Code Documentation**
- **Header files**: Document public API with clear descriptions
- **Complex functions**: Add inline comments explaining logic
- **API changes**: Update header documentation immediately

### **Process Documentation**
- **Development log**: Updated after every task
- **README files**: Keep current and accurate
- **API documentation**: Maintain for public interfaces

## 🚫 **Development Restrictions**

### **What NOT to Do**
- ❌ **Don't touch Engine source** code
- ❌ **Don't change engine version** (UE 5.6.1 only)
- ❌ **Don't add third-party dependencies** without asking
- ❌ **Don't violate module boundaries**
- ❌ **Don't skip testing** after changes
- ❌ **Don't forget to update** development log

### **What to ALWAYS Do**
- ✅ **Follow existing naming conventions**
- ✅ **Preserve working behavior**
- ✅ **Test after every change**
- ✅ **Update development log**
- ✅ **Use CI system** when possible
- ✅ **Check logs** after testing

## 🎯 **Success Metrics**

- ✅ **One change at a time** implemented and tested
- ✅ **Development log updated** after every task
- ✅ **Module boundaries preserved**
- ✅ **Existing code style maintained**
- ✅ **Working behavior preserved**
- ✅ **All changes tested** before continuing
- ✅ **Documentation kept current**

## 🚪 **Approval Gate System - CRITICAL**

### **When Approval is Required**
- **API changes**: Any modification to public interfaces or data schemas
- **File layout changes**: Moving, renaming, or restructuring files
- **Module dependencies**: Changes to Build.cs dependencies or .uplugin configuration
- **Behavior changes**: Any modification that affects user experience or output

### **Approval Request Format**
```
APPROVAL NEEDED: <summary>
Impact: <API/file layout/module/behavior>
Why not destructive: <reason>
Proposed diff scope: <files>
Rollback: <git ref or plan>
Proceed? yes/no
```

### **Required Response Format**
**Before editing files, reply with:**
```
Plan:
Impact:
Alternatives considered:
Why this is non destructive:
Validation plan:
```

**After implementation, reply with:**
```
Diff summary:
Behavior verification:
Build + test evidence:
Packaging check:
```

## 📋 **Change Workflow Requirements**

### **Required Steps for Any Fix**
1. **Plan**: Produce a plan with root cause, minimal fix, alternatives rejected, risk assessment
2. **Approval**: Ask for confirmation when any API, file layout, or module config might change
3. **Implement**: Apply the smallest fix. Do not edit unrelated files
4. **Validate**: Rebuild all plugin DLLs together, run tests, exercise affected features
5. **Report**: Output change report with what was broken, what changed, why non-destructive, validation results

### **Commit Template**
```
feat/fix: <one line summary preserving behavior>

Root cause:
Change:
Why non destructive:
Tests/validation:
Affected modules:
```

description: Development workflow rules that enforce incremental development, proper logging, module boundary compliance, and approval gate requirements for the MagicOptimizer UE5 plugin project.
globs: ["**/*.cpp", "**/*.h", "**/*.md", "**/*.py"]
alwaysApply: true
---
