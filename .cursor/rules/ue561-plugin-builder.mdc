# Cursor Rule • UE 5.6.1 Plugin Builder

Scope
1. Target Unreal Engine 5.6.1 plugin work only
2. Do not change the engine version and do not touch Engine source
3. Keep edits inside Plugins/MagicOptimizer

Modules for this repo
• MagicOptimizer Runtime module
• MagicOptimizerEditor Editor module

Repository and files
1. All code edits live under HostProject/Plugins/MagicOptimizer/** (single source of truth)
2. Do not keep a duplicate plugin at the repo root; the repo root is for docs/, tools/, Reports/, and CI only
3. Layout is Plugins/MagicOptimizer/Source/<ModuleName> with Public and Private folders
4. MagicOptimizer.uplugin declares both modules and EngineAssociation 5.6.1

Build rules
1. Use RunUAT BuildPlugin to package and validate before a pull request
2. Regenerate project files when the descriptor or modules change
3. Windows toolchain baseline is Visual Studio 2022 with the current Windows SDK
4. When packaging on Windows, prefer -NoHostPlatform to avoid host rules scans
5. Use Scripts/PackagePlugin.ps1 as the canonical entrypoint

Module configuration
1. In each Build.cs set PCHUsage to UseExplicitOrSharedPCHs
2. Runtime Public dependencies are Core, CoreUObject, Engine
3. Editor dependencies are only in MagicOptimizerEditor and kept in Private

Coding standards and API surface
1. Use MAGICOPTIMIZER_API for exported runtime symbols
2. Keep headers minimal and prefer forward declarations
3. Follow existing naming conventions; existing code style takes precedence
4. Prefer minimal edits; preserve working behavior and module boundaries

Asset classification
Never infer types from names. Inspect properties such as CompressionSettings, LODGroup, PowerOfTwoMode, dimensions, LOD count, lightmap UV presence, and Nanite state

Python packaging and scripts
1. Default Python package is plugin-shipped at <PluginContent>/Python/magic_optimizer
2. Resolve default path via IPluginManager; allow user override in Project Settings
3. Avoid using HostProject/Content/Python/magic_optimizer except for local dev; do not ship it
4. Avoid engine-path hardcoding; keep Python modules self-contained

Logging, tests, validation
1. Use LogMagicOptimizer for messages
2. Add at least one automation test that loads the runtime module
3. Treat UHT and UBT warnings as errors during development

Packaging checklist
1. Clean plugin Binaries and Intermediate
2. Run Scripts/PackagePlugin.ps1
3. Enable the packaged plugin in a blank C++ project for a smoke test
4. Update CHANGELOG and bump Version fields in the descriptor
5. Store packaged output under HostProject/Artifacts
6. Ensure FilterPlugin.ini excludes dev-only content (docs/, Reports/, tools/) from packages

Cursor behavior here
1. Plan in short steps, compile after each step
2. Ask before adding third party dependencies or new UE modules
3. Keep module boundaries clean and prefer cpp level WITH_EDITOR guards
4. After each significant change, verify the result (build/package/test) and record a timestamped entry in docs/DEVELOPMENT_LOG.md
5. Use root .cursor/rules; do not create per-subfolder rules unless scoping a separate workspace

Docs and process
1. Root README is a concise hero page; detailed developer docs under docs/DEV_README.md
2. After each task, append a timestamped entry to docs/DEVELOPMENT_LOG.md (append-only)
3. Use tools/git_commit_push.ps1 for commits/pushes; push after major milestones or when explicitly approved
4. Keep a separate backlog log for AI debugging; developers use DEVELOPMENT_LOG.md

CI/Terminal (workspace)
1. Prefer the 'ci' wrapper (or 'cilog') for commands; ensure non-interactive flags; pipe output with 2>&1 | Out-String -Width 4096
2. If 'ci' is missing, source $PROFILE.CurrentUserAllHosts and retry
3. On non-zero exits, rerun with 'cilog' and review the log

