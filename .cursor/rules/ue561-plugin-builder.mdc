
# UE 5.6.1 Plugin Builder - Core Rules

## 🎯 **Scope and Boundaries**

**CRITICAL**: This rule applies to ALL MagicOptimizer plugin development work.

### **Target Environment**
- **Engine Version**: Unreal Engine 5.6.1 ONLY
- **Work Area**: Keep edits inside `HostProject/Plugins/MagicOptimizer/**`
- **Engine Source**: NEVER touch Engine source code
- **Single Source**: All code edits live under `HostProject/Plugins/MagicOptimizer/**`

### **Module Architecture**
- **MagicOptimizer**: Runtime module (Core, CoreUObject, Engine dependencies)
- **MagicOptimizerEditor**: Editor module (Editor dependencies in Private only)
- **Module Boundaries**: Keep headers minimal, prefer forward declarations

## 🏗️ **Repository Structure**

```
MagicOptimizer/                    # Repo root (docs/, tools/, CI only)
├── .cursor/rules/                # Project rules (this file)
├── docs/                         # Documentation
├── tools/                        # Development tools
├── Reports/                      # Generated reports
└── HostProject/                  # UE project
    └── Plugins/MagicOptimizer/   # SINGLE SOURCE OF TRUTH
        ├── Source/
        │   ├── MagicOptimizer/   # Runtime module
        │   └── MagicOptimizerEditor/ # Editor module
        ├── Content/Python/        # Plugin-shipped Python
        └── MagicOptimizer.uplugin # Plugin descriptor
```

**NEVER** keep a duplicate plugin at the repo root.

## 🔨 **Build Architecture - CRITICAL**

### **Multi-DLL Plugin Reality**
UE5 plugins often have multiple DLLs that MUST be rebuilt together:

```cpp
// ❌ WRONG: Partial rebuilds cause "ghost" behavior
// Old code still runs, debugging becomes impossible

// ✅ CORRECT: Rebuild ALL plugin DLLs together
// Check build timestamps match across all plugin DLLs
```

### **Build Rules**
1. **Use `Scripts/PackagePlugin.ps1`** as canonical entrypoint
2. **Regenerate project files** when descriptor or modules change
3. **Windows baseline**: Visual Studio 2022 + current Windows SDK
4. **Package with `-NoHostPlatform`** to avoid host rules scans
5. **Clean Binaries/Intermediate** before packaging

## 📝 **Coding Standards**

### **API Surface**
```cpp
// ✅ CORRECT: Use proper API macros
MAGICOPTIMIZER_API void MyFunction();

// ❌ WRONG: Missing API macro
void MyFunction(); // Won't export properly
```

### **Naming Conventions**
- **Existing code style takes precedence** over new conventions
- **Follow established patterns** in the codebase
- **Preserve working behavior** and module boundaries

## 🧪 **Testing and Validation - CRITICAL**

### **ALWAYS Use Built-in CI System**
```bash
# ✅ CORRECT: Use automated testing
tools/run_ci.ps1 -Phase Audit -FailOnError

# ❌ WRONG: Manual testing only
# Manual testing is error-prone and inconsistent
```

### **Log Analysis is Mandatory**
After ANY fix or change:
1. **Check generated log files** immediately
2. **Compare before/after log states**
3. **Look for error patterns**
4. **Document log analysis** in responses
5. **Logs contain the truth** about what's happening

## 📦 **Python and Assets**

### **Python Packaging**
```python
# ✅ CORRECT: Plugin-shipped Python
<PluginContent>/Python/magic_optimizer

# ❌ WRONG: Local dev path in packages
HostProject/Plugins/MagicOptimizer/Content/Python/magic_optimizer
```

### **Asset Classification**
**NEVER infer types from names**. Inspect actual properties:
- CompressionSettings, LODGroup, PowerOfTwoMode
- Dimensions, LOD count, lightmap UV presence
- Nanite state

## 🔄 **Development Workflow**

### **Incremental Development**
1. **Plan in short steps**
2. **Compile after each step**
3. **Verify result** (build/package/test)
4. **Record timestamped entry** in `docs/DEVELOPMENT_LOG.md`

### **Documentation Requirements**
- **Append-only** development log updates
- **Use `tools/git_commit_push.ps1`** for commits
- **Push after major milestones** or when approved

## ⚠️ **Common Pitfalls**

### **Ghost Code Trap**
```cpp
// ❌ SYMPTOM: Old code still runs after "fixes"
// ❌ CAUSE: Partial rebuilds, mismatched DLL timestamps
// ✅ SOLUTION: Rebuild ALL plugin DLLs together
```

### **Log Ignorance**
```cpp
// ❌ SYMPTOM: "Fix didn't work" without log analysis
// ❌ CAUSE: Not checking logs after changes
// ✅ SOLUTION: ALWAYS check logs immediately after changes
```

## 🎯 **Success Metrics**

- ✅ **All plugin DLLs rebuilt** together
- ✅ **Build timestamps match** across modules
- ✅ **Logs analyzed** after every change
- ✅ **CI system used** for testing
- ✅ **Development log updated** after each task
- ✅ **Module boundaries preserved**
- ✅ **Existing code style maintained**


- ✅ **Existing code style maintained**

