
# Python and Assets - Always Apply

## üêç **Python Packaging Rules**

### **Plugin-Shipped Python**
```python
# ‚úÖ CORRECT: Plugin-shipped Python location
<PluginContent>/Python/magic_optimizer/
```

### **Python Path Resolution**
```cpp
// ‚úÖ CORRECT: Resolve via IPluginManager
IPluginManager& PluginManager = IPluginManager::Get();
TSharedPtr<IPlugin> Plugin = PluginManager.FindPlugin(TEXT("MagicOptimizer"));
FString PythonPath = Plugin->GetContentDir() / TEXT("Python/magic_optimizer");

// ‚ùå WRONG: Hardcoded engine paths
FString PythonPath = TEXT("C:/Program Files/Epic Games/UE_5.6/Engine/...");
```

### **Python Module Self-Containment**
```python
# ‚úÖ CORRECT: Self-contained modules
from . import utils
from . import io_csv
from . import presets

# ‚ùå WRONG: External dependencies
import external_library  # Not available in packaged plugin
```

## üé® **Asset Classification Rules**

### **NEVER Infer Types from Names**
```cpp
// ‚ùå WRONG: Infer type from filename
if (AssetName.Contains(TEXT("_Normal"))) {
    // Assume it's a normal map
}

// ‚úÖ CORRECT: Inspect actual properties
UTexture2D* Texture = Cast<UTexture2D>(Asset);
if (Texture && Texture->CompressionSettings == TC_Normalmap) {
    // It's actually a normal map
}
```

### **Required Property Checks**
```cpp
// ‚úÖ CORRECT: Check actual texture properties
UTexture2D* Texture = Cast<UTexture2D>(Asset);
if (Texture) {
    // Check compression settings
    TextureCompressionSettings Compression = Texture->CompressionSettings;
    
    // Check LOD group
    TextureGroup LODGroup = Texture->LODGroup;
    
    // Check dimensions
    int32 Width = Texture->GetSizeX();
    int32 Height = Texture->GetSizeY();
    
    // Check power of two mode
    bool bIsPowerOfTwo = Texture->IsPowerOfTwo();
}
```

### **Asset Type Detection**
```cpp
// ‚úÖ CORRECT: Check actual asset class
if (UStaticMesh* Mesh = Cast<UStaticMesh>(Asset)) {
    // It's actually a static mesh
    int32 LODCount = Mesh->GetNumLODs();
    bool bHasLightmapUVs = Mesh->GetLightMapCoordinateIndex() >= 0;
    bool bIsNaniteEnabled = Mesh->IsNaniteEnabled();
}

// ‚ùå WRONG: Assume type from path
if (AssetPath.Contains(TEXT("/Meshes/"))) {
    // Assume it's a mesh
}
```

## üîç **Asset Analysis Patterns**

### **Texture Analysis**
```cpp
// ‚úÖ CORRECT: Comprehensive texture analysis
void AnalyzeTexture(UTexture2D* Texture) {
    if (!Texture) return;
    
    // Basic properties
    FString Name = Texture->GetName();
    int32 Width = Texture->GetSizeX();
    int32 Height = Texture->GetSizeY();
    EPixelFormat Format = Texture->GetPixelFormat();
    
    // Compression settings
    TextureCompressionSettings Compression = Texture->CompressionSettings;
    TextureGroup LODGroup = Texture->LODGroup;
    
    // LOD settings
    int32 MaxSize = Texture->GetMaxTextureSize();
    bool bIsPowerOfTwo = Texture->IsPowerOfTwo();
    
    // Mip settings
    bool bHasMips = Texture->GetNumMips() > 1;
    int32 MipCount = Texture->GetNumMips();
}
```

### **Mesh Analysis**
```cpp
// ‚úÖ CORRECT: Comprehensive mesh analysis
void AnalyzeMesh(UStaticMesh* Mesh) {
    if (!Mesh) return;
    
    // LOD information
    int32 LODCount = Mesh->GetNumLODs();
    
    // Lightmap settings
    int32 LightmapCoordinateIndex = Mesh->GetLightMapCoordinateIndex();
    bool bHasLightmapUVs = LightmapCoordinateIndex >= 0;
    
    // Nanite settings
    bool bIsNaniteEnabled = Mesh->IsNaniteEnabled();
    
    // Collision settings
    bool bHasCollision = Mesh->GetCollisionComplexity() != ECollisionTraceFlag::CTF_UseDefault;
    
    // LOD settings
    float ScreenSize = Mesh->GetMinimumScreenSize();
}
```

## üì¶ **Asset Packaging Considerations**

### **Content Filtering**
```ini
# ‚úÖ CORRECT: FilterPlugin.ini excludes dev content
[Content]
+Paths=Content/Python
+Paths=Content/Textures
-Paths=Content/DevOnly
-Paths=Content/Tests
-Paths=Content/Debug
```

### **Python Module Packaging**
```cpp
// ‚úÖ CORRECT: Include Python modules in package
TArray<FString> PythonModules = {
    TEXT("magic_optimizer"),
    TEXT("magic_optimizer.utils"),
    TEXT("magic_optimizer.io_csv"),
    TEXT("magic_optimizer.presets"),
    TEXT("magic_optimizer.textures")
};

// ‚ùå WRONG: Exclude Python from package
// Python modules won't be available to users
```

## ‚ö†Ô∏è **Common Asset Mistakes**

### **Type Assumption Errors**
```cpp
// ‚ùå SYMPTOM: "Asset not found" errors
// ‚ùå CAUSE: Assuming asset type from path or name
// ‚úÖ SOLUTION: Check actual asset class and properties

// ‚ùå SYMPTOM: Incorrect optimization applied
// ‚ùå CAUSE: Wrong asset type classification
// ‚úÖ SOLUTION: Verify asset properties before processing
```

### **Path Hardcoding**
```cpp
// ‚ùå SYMPTOM: Plugin breaks on different machines
// ‚ùå CAUSE: Hardcoded paths to engine or project
// ‚úÖ SOLUTION: Use IPluginManager and relative paths
```

## üéØ **Success Metrics**

- ‚úÖ **Python modules self-contained** and packageable
- ‚úÖ **Asset types correctly identified** through properties
- ‚úÖ **No hardcoded paths** in code
- ‚úÖ **Plugin-shipped Python** works in packaged plugin
- ‚úÖ **Asset analysis accurate** and reliable
- ‚úÖ **Content filtering** excludes dev-only content
- ‚úÖ **Python path resolution** works across environments
description:
globs:
alwaysApply: false
---

globs:
alwaysApply: false
---
